# ls
alias la="ls -a"
alias lf="ls -F"
alias ll="ls -l"

# diff
alias diff=colordiff

# which
alias which=/usr/bin/which

# vi
alias vi=vim

# less 色 行数
alias less='less -RM'

# lv
alias lv='lv -c -Au8'

# du
alias du="du -h"
alias df="df -h"
alias duh="du -h ./ --max-depth=1"

# tmux
alias tm='tmux'
alias tma='tmux attach'
alias tml='tmux list-window'

# simple server
alias server="python -m SimpleHTTPServer "

# pretty-print JSON
pretty-print-json () {
    if [ $# -eq 0 ] ; then
        echo "help: pj jsonfile1 jsonfile2 ..."
    else
        for file in $@; do
            cat $file | python -mjson.tool
        done
    fi
}
alias pj='pretty-print-json'

# rm sleep
safe-rm () {
    if [ "$1" = "-rf" -o "$1" = "-fr" ]; then
        echo "$PWD"
        echo "rm $*"
        sleep 5
    fi
    \rm $*
}
alias rm='safe-rm'

# ping
alias ping='ping -c 4'

# bundle
alias bi='bundle install --path vendor/bundle'

# iso2dmg
iso2dmg () {
    if [ -z "$1" ] ; then
        echo "Error: ISOfile is Empty."
        echo "iso2dmg ISOfile Outfile"
    elif [ -z "$2" ] ; then
        echo "Error: Outfile is Empty."
        echo "iso2dmg ISOfile Outfile"
    else
        hdiutil convert -format UDRW -o $2 $1
    fi
}

#alias ls='ls -al'
alias cp='nocorrect cp -irp'
alias refe='nocorrect refe'

alias copy='cp -ip' del='rm -i' move='mv -i'
alias fullreset='echo "\ec\ec"'
h ()  		      {history $* | less}
alias ja='LANG=ja_JP.eucJP XMODIFIERS=@im=kinput2'
mdcd ()	     	 {mkdir -p "$@" && cd "$*[-1]"}
mdpu ()		 	{mkdir -p "$@" && pushd "$*[-1]"}
alias pu=pushd po=popd dirs='dirs -v'

# extract http://d.hatena.ne.jp/jeneshicc/20110215/1297778049
extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.tar.xz)    tar xvJf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       unrar x $1     ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *.lzma)      lzma -dv $1    ;;
          *.xz)        xz -dv $1      ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}
alias ex='extract'

# 10行より多くの項目がある場合は、前後5行のみ表示するls. http://qiita.com/yuyuchu3333/items/b10542db482c3ac8b059
ls_abbrev() {
    # -a : Do not ignore entries starting with ..
    # -C : Force multi-column output.
    # -F : Append indicator (one of */=>@|) to entries.
    local cmd_ls='ls'
    local -a opt_ls
    opt_ls=('-aCF' '--color=always')
    case "${OSTYPE}" in
        freebsd*|darwin*)
            if type gls > /dev/null 2>&1; then
                cmd_ls='gls'
            else
                # -G : Enable colorized output.
                opt_ls=('-aCFG')
            fi
            ;;
    esac

    local ls_result
    ls_result=$(CLICOLOR_FORCE=1 COLUMNS=$COLUMNS command $cmd_ls ${opt_ls[@]} | sed $'/^\e\[[0-9;]*m$/d')
    local ls_lines=$(echo "$ls_result" | wc -l | tr -d ' ')

    if [ $ls_lines -gt 10 ]; then
        echo "$ls_result" | head -n 5
        echo '...'
        echo "$ls_result" | tail -n 5
        echo "$(command ls -1 -A | wc -l | tr -d ' ') files exist"
    else
        echo "$ls_result"
    fi
}

# procces grep
alias pg='ps aux | grep '

# global alias
alias -g L="| less -RM "
alias -g LV="| $PAGER "
alias -g H='| head '
alias -g T='| tail '
alias -g G='| xargs grep -in --color=always '
alias -g GV='| xargs grep -vn --color=always '

# knife-solo
# knife-soloでChefリポジトリを作成し、git初回コミットまで実行
init-knife-solo-repo () {
    bundle exec knife solo init chef-repo
    cd chef-repo
    git init
    git add .
    git commit -m "First commit."
    cd ../
}
alias ikr=init-knife-solo-repo

# 指定されたnodeのchef-soloをアップデートする
update-chef-solo () {
    cd chef-repo
    bundle exec knife solo prepare $1
    git add .
    git commit -m "Exec knife solo prepare."
    cd ../
}
alias ucs=update-chef-solo

# ssh {hostname} で接続できるように設定する
vagrant-ssh-setup () {
    if [ -n "$1" ] ; then
        echo >> ~/.ssh/config
        vagrant ssh-config --host $1 >> ~/.ssh/config
    else
        echo "Error: Hostname is empty."
        echo "vss hostname"
    fi
}
alias vss=vagrant-ssh-setup

# vagrantでVMを作成し、SSHを設定
# knife-soloでChefリポジトリを作成
# git初回コミットまで実行
create-vm () {
    if [ -z "$1" ] ; then
        echo "Error: Box is empty."
        echo "cvm Box VMname"
    elif [ -z "$2" ] ; then
        echo "Error: VMname is empty."
        echo "cvm Box VMname"
    else
        mkdir $2
        cd $2

        echo "Initializing VM."
        vagrant init $1
        vagrant up
        echo

        echo "Configured ssh."
        vagrant ssh-config --host $2 >> ~/.ssh/config
        echo

#        echo "Bundle install knife-solo and Berkshelf."
#        bundle init
#        echo 'gem "knife-solo"' >> Gemfile
#        echo 'gem "berkshelf"' >> Gemfile
#        bundle install # --path vendor/bundle
#        echo

        echo "Create repo."
        bundle exec knife solo init .
        echo

        echo "Update Chef."
        bundle exec knife solo prepare $2
        echo

        echo "Halt VM."
        vagrant halt
        echo

        git init
        git add .
        git commit -m "First commit."

        echo "Edit ipaddress, and add cookbooks."
    fi
}
alias cvm=create-vm

create-cookbook () {
    if [ -n "$1" ] ; then
        bundle exec knife cookbook create $1 -o site-cookbooks
        $EDITOR site-cookbooks/$1/recipes/default.rb
    else
        echo "Error: Cookbook is empty."
        echo "cbook Cookbook"
    fi
}
alias cbook=create-cookbook

exec-cookbook () {
    if [ -z "$1" ] ; then
        echo "Error: Hostname is empty."
        echo "ebook Hostname Cookbook"
        echo "ebook Hostname"
    elif [ -z "$2" ] ; then
        bundle exec knife solo cook $1
    else
        bundle exec knife solo cook $1 -o $2
    fi
}
alias ebook=exec-cookbook

download-cookbook () {

    if [ $# -eq 0 ] ; then
        echo "Error: Cookbook is empty."
        echo "dbook Cookbook..."
        return 1
    fi

    for book in $*
    do
        echo "Downloading Cookbook[\e[4;35m$book\e[m]"
        bundle exec knife cookbook site vendor $book -o cookbooks
        echo
    done
}
alias dbook=download-cookbook

alias v="vagrant"
alias vbl="vagrant box list"
alias vup="vagrant up"
alias vssh="vagrant ssh"
alias valt="vagrant halt"
alias vdy="vagrant destroy"
