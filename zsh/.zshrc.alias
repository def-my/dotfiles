# ls
alias la="ls -a"
alias lf="ls -F"
alias ll="ls -lh"
alias lal="ls -alh"

# diff
alias diff=colordiff

# which
alias which=/usr/bin/which

# vi
alias vi=vim

# less 色 行数
alias less='less -RMI'

# lv
# alias lv='lv -c -Au8'

# du
alias du="du -h"
alias df="df -h"
alias duh="du -h ./ --max-depth=1"

# tmux
alias tm='tmux'
alias tma='tmux attach'
alias tml='tmux list-window'

# simple server(require python3)
alias server="python -m http.server "

# pretty-print JSON
pretty-print-json () {
    if [ $# -eq 0 ] ; then
        echo "help: pj jsonfile1 jsonfile2 ..."
    else
        for file in $@; do
            cat $file | python -mjson.tool
        done
    fi
}
alias pj='pretty-print-json'

# rm sleep
safe-rm () {
    if [ "$1" = "-rf" -o "$1" = "-fr" ]; then
        echo "$PWD"
        echo "rm $*"
        sleep 5
    fi
    \rm $*
}
alias rm='safe-rm'

# ping
alias ping='ping -c 4'

# bundle
alias bi='bundle install --path vendor/bundle'

# iso2dmg
iso2dmg () {
    if [ -z "$1" ] ; then
        echo "Error: ISOfile is Empty."
        echo "iso2dmg ISOfile Outfile"
    elif [ -z "$2" ] ; then
        echo "Error: Outfile is Empty."
        echo "iso2dmg ISOfile Outfile"
    else
        hdiutil convert -format UDRW -o $2 $1
    fi
}

alias cp='nocorrect cp -irp'
alias refe='nocorrect refe'

alias copy='cp -ip' del='rm -i' move='mv -i'
alias fullreset='echo "\ec\ec"'
h () {history $* | less}
alias ja='LANG=ja_JP.eucJP XMODIFIERS=@im=kinput2'
mdcd () {mkdir -p "$@" && cd "$*[-1]"}
mdpu () {mkdir -p "$@" && pushd "$*[-1]"}
alias pu=pushd po=popd dirs='dirs -v'

# extract http://d.hatena.ne.jp/jeneshicc/20110215/1297778049
extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.tar.xz)    tar xvJf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       unrar x $1     ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *.lzma)      lzma -dv $1    ;;
          *.xz)        xz -dv $1      ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}
alias ex='extract'

# 10行より多くの項目がある場合は、前後5行のみ表示するls. http://qiita.com/yuyuchu3333/items/b10542db482c3ac8b059
ls_abbrev() {
    # -a : Do not ignore entries starting with ..
    # -C : Force multi-column output.
    # -F : Append indicator (one of */=>@|) to entries.
    local cmd_ls='ls'
    local -a opt_ls
    opt_ls=('-aCF' '--color=always')
    case "${OSTYPE}" in
        freebsd*|darwin*)
            if type gls > /dev/null 2>&1; then
                cmd_ls='gls'
            else
                # -G : Enable colorized output.
                opt_ls=('-aCFG')
            fi
            ;;
    esac

    local ls_result
    ls_result=$(CLICOLOR_FORCE=1 COLUMNS=$COLUMNS command $cmd_ls ${opt_ls[@]} | sed $'/^\e\[[0-9;]*m$/d')
    local ls_lines=$(echo "$ls_result" | wc -l | tr -d ' ')

    if [ $ls_lines -gt 10 ]; then
        echo "$ls_result" | head -n 5
        echo '...'
        echo "$ls_result" | tail -n 5
        echo "$(command ls -1 -A | wc -l | tr -d ' ') files exist"
    else
        echo "$ls_result"
    fi
}

# procces grep
alias pg='ps aux | grep '

# global alias
alias -g L="| $PAGER -RM "
alias -g LV="| $PAGER "
alias -g H='| head '
alias -g T='| tail '
alias -g G='| grep -in --color=always'
alias -g GV='| grep -vn --color-always'
alias -g xG='| xargs grep -in --color=always '
alias -g xGV='| xargs grep -vn --color=always '
alias -g CP='| pbcopy '
alias PA='pbpaste '

# vagrant
alias v="vagrant"
alias vbl="vagrant box list"
alias vup="vagrant up"
alias vssh="vagrant ssh"
alias valt="vagrant halt"
alias vdy="vagrant destroy"

# peco
alias o='ls -a | peco | xargs open '
alias gcd='cd $(ghq list -p | peco | head -n1)'

peco-xargs() {
  peco | while read LINE; do $@ $LINE; done
}
alias p=peco-xargs

function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history

# Update all repository
function ghq-update() {
  ghq list | grep github | sed -E 's/^[^\/]+\/(.+)/\1/' | xargs -n 1 -P 10 ghq get -u
}
